{"version":3,"file":"static/js/165.3d7c021c.chunk.js","mappings":"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","sources":["webpack://react-complete-guide/./src/components/comments/Comments.module.css?d88e","webpack://react-complete-guide/./src/components/comments/NewCommentForm.module.css?81c1","components/comments/NewCommentForm.js","webpack://react-complete-guide/./src/components/comments/CommentItem.module.css?204f","components/comments/CommentItem.js","webpack://react-complete-guide/./src/components/comments/CommentsList.module.css?06d6","components/comments/CommentsList.js","components/comments/Comments.js","webpack://react-complete-guide/./src/components/quotes/HighlightedQuote.module.css?c98c","components/quotes/HighlightedQuote.js","components/pages/QuoteDetail.js","webpack://react-complete-guide/./src/components/quotes/NoQuotesFound.module.css?2c4b","components/quotes/NoQuotesFound.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"comments\":\"Comments_comments__9cxIN\"};","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"NewCommentForm_form__C3cQf\",\"loading\":\"NewCommentForm_loading__aSq20\",\"control\":\"NewCommentForm_control__iR6jS\",\"actions\":\"NewCommentForm_actions__NC323\"};","import { useEffect, useRef } from \"react\";\nimport useHttp from \"../../hooks/use-http\";\nimport { addComment } from \"../../lib/api\";\nimport classes from \"./NewCommentForm.module.css\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\nimport { useParams } from \"react-router-dom\";\n\nconst NewCommentForm = (props) => {\n  const params = useParams();\n  const commentTextRef = useRef();\n\n  const { sendRequest, status, error } = useHttp(addComment);\n\n  const { onAddedComment } = props;\n\n  useEffect(() => {\n    if (status === \"completed\" && !error) {\n      onAddedComment();\n    }\n  }, [status, error, onAddedComment]);\n\n  const submitFormHandler = (event) => {\n    event.preventDefault();\n    sendRequest({\n      commentData: { text: commentTextRef.current.value },\n      quoteId: params.id,\n    });\n  };\n\n  return (\n    <form className={classes.form} onSubmit={submitFormHandler}>\n      {status === \"pending\" && (\n        <div className=\"centered\">\n          <LoadingSpinner></LoadingSpinner>\n        </div>\n      )}\n      <div className={classes.control} onSubmit={submitFormHandler}>\n        <label htmlFor=\"comment\">Your Comment</label>\n        <textarea id=\"comment\" rows=\"5\" ref={commentTextRef}></textarea>\n      </div>\n      <div className={classes.actions}>\n        <button className=\"btn\">Add Comment</button>\n      </div>\n    </form>\n  );\n};\n\nexport default NewCommentForm;\n","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"CommentItem_item__+vwzS\"};","import classes from './CommentItem.module.css';\n\nconst CommentItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <p>{props.text}</p>\n    </li>\n  );\n};\n\nexport default CommentItem;\n","// extracted by mini-css-extract-plugin\nexport default {\"comments\":\"CommentsList_comments__UVWAR\"};","import CommentItem from './CommentItem';\nimport classes from './CommentsList.module.css';\n\nconst CommentsList = (props) => {\n  return (\n    <ul className={classes.comments}>\n      {props.comments.map((comment) => (\n        <CommentItem key={comment.id} text={comment.text} />\n      ))}\n    </ul>\n  );\n};\n\nexport default CommentsList;\n","import { useCallback, useEffect, useState } from 'react';\nimport { getAllComments } from '../../lib/api';\nimport useHttp from '../../hooks/use-http';\nimport classes from './Comments.module.css';\nimport NewCommentForm from './NewCommentForm';\nimport { useParams } from 'react-router-dom';\nimport LoadingSpinner from '../UI/LoadingSpinner';\nimport CommentsList from './CommentsList';\n\nconst Comments = () => {\n  const params = useParams();\n  const [isAddingComment, setIsAddingComment] = useState(false);\n\n  const { sendRequest, status, data:loadedComments} = useHttp(getAllComments);\n\n  console.log(loadedComments)\n\n  useEffect(() => {\n    sendRequest(params.id)\n  }, [sendRequest, params])\n\n  const startAddCommentHandler = () => {\n    setIsAddingComment(true);\n  };\n\n  const addedNewCommentHandler = useCallback(() => {\n    sendRequest(params.id)\n  },[sendRequest,params]);\n\n  let comments;\n\n  if(status === 'pending'){\n    comments = (\n      <div className='centered'>\n        <LoadingSpinner></LoadingSpinner>\n      </div>\n    )\n  }\n\n  if(status === 'completed' && (loadedComments && loadedComments.length > 0)){\n    comments = (\n      <CommentsList comments={loadedComments}></CommentsList>\n    )\n  }\n\n  if(status === 'completed' && (!loadedComments || loadedComments.length === 0)){\n    comments = <p>No comments were added yet</p>\n  }\n  \n  return (\n    <section className={classes.comments}>\n      <h2>User Comments</h2>\n      {!isAddingComment && (\n        <button className='btn' onClick={startAddCommentHandler}>\n          Add a Comment\n        </button>\n      )}\n      {isAddingComment && <NewCommentForm onAddedComment={addedNewCommentHandler} />}\n      {comments}\n    </section>\n  );\n};\n\nexport default Comments;\n","// extracted by mini-css-extract-plugin\nexport default {\"quote\":\"HighlightedQuote_quote__dE8qA\"};","import classes from './HighlightedQuote.module.css';\n\nconst HighlightedQuote = (props) => {\n  const quote = props.quote;\n  return (\n    <figure className={classes.quote}>\n      <p>{quote.text}</p>\n      <figcaption>{quote.author}</figcaption>\n    </figure>\n  );\n};\n\nexport default HighlightedQuote;\n","import { Link, Route, useParams, useRouteMatch } from \"react-router-dom\";\nimport Comments from \"../comments/Comments\";\nimport HighlightedQuote from \"../quotes/HighlightedQuote\";\nimport useHttp from \"../../hooks/use-http\";\nimport { getSingleQuote } from \"../../lib/api\";\nimport { useEffect } from \"react\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\nimport NoQuotesFound from \"../quotes/NoQuotesFound\";\n\nconst QuoteDetail = () => {\n  const params = useParams();\n  const match = useRouteMatch();\n  const  quoteId  = params;\n\n  const {\n    sendRequest,\n    status,\n    data: loadedQuote,\n    error,\n  } = useHttp(getSingleQuote, true);\n\n\n  useEffect(() => {\n    sendRequest(quoteId.id);\n  }, [sendRequest, quoteId]);\n\n  if (status === \"pending\") {\n    return (\n      <div className=\"centered\">\n        <LoadingSpinner></LoadingSpinner>\n      </div>\n    );\n  }\n\n  if (error) {\n    return <p className=\"centered focus\"> {error} </p>;\n  }\n\n  if (status === \"completed\" && (!loadedQuote)) {\n    return <NoQuotesFound></NoQuotesFound>;\n  }\n\n  return (\n    <section>\n      <HighlightedQuote quote={loadedQuote}></HighlightedQuote>\n      <Route path={match.path} exact>\n        <div className=\"centered\">\n          <Link className=\"btn--flat\" to={`${match.url}/comments`}>\n            Load Comments\n          </Link>\n        </div>\n      </Route>\n      <Route path={`${match.path}/comments`}>\n        <Comments></Comments>\n      </Route>\n    </section>\n  );\n};\n\nexport default QuoteDetail;\n","// extracted by mini-css-extract-plugin\nexport default {\"noquotes\":\"NoQuotesFound_noquotes__EUQsM\"};","import { Link } from 'react-router-dom';\nimport classes from './NoQuotesFound.module.css';\n\nconst NoQuotesFound = () => {\n  return (\n    <div className={classes.noquotes}>\n      <p>No quotes found!</p>\n      <Link className='btn' to='/new-quote'>\n        Add a Quote\n      </Link>\n    </div>\n  );\n};\n\nexport default NoQuotesFound;\n"],"names":["props","params","useParams","commentTextRef","useRef","useHttp","addComment","sendRequest","status","error","onAddedComment","useEffect","submitFormHandler","event","preventDefault","commentData","text","current","value","quoteId","id","className","classes","onSubmit","LoadingSpinner","htmlFor","rows","ref","comments","map","comment","useState","isAddingComment","setIsAddingComment","getAllComments","loadedComments","data","console","log","addedNewCommentHandler","useCallback","length","onClick","quote","author","match","useRouteMatch","getSingleQuote","loadedQuote","path","exact","to","url","NoQuotesFound"],"sourceRoot":""}